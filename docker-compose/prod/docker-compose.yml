name: kasyus-prod

services:


  discovery-service:
    build:
      context: ../../discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - DISCOVERY_SERVICE_HOSTNAME=discovery-service
      - OTEL_SERVICE_NAME=discovery-service

    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    networks:
      - kasyus-network

    extends:
      file: common-config.yml
      service: microservice-common-configs


  api-gateway:
    build:
      context: ../../api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8072:8072"
    environment:
      - DISCOVERY_SERVICE_HOSTNAME=discovery-service
      - DISCOVERY_SERVICE_PORT=8761
      - OTEL_SERVICE_NAME=api-gateway
    networks:
      - kasyus-network
    healthcheck:
      test: "curl --fail --silent localhost:8072/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 5s
      retries: 40
      start_period: 20s
#    depends_on:
#      discovery-service:
#        condition: service_healthy
    restart: always
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  auth-service:
    build:
      context: ../../auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      - SERVER_PORT=8084
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/kasyus_auth
      - SPRING_DATASOURCE_USERNAME=kasyus
      - SPRING_DATASOURCE_PASSWORD=kasyus123
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092
      - SPRING_DATA_REDIS_HOST=redis
      - OTEL_SERVICE_NAME=auth-service
    networks:
      - kasyus-network
    healthcheck:
      test: "curl --fail --silent auth-service:8084/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  user-service:
    build:
      context: ../../user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - SERVER_PORT=8085
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/kasyus_users
      - SPRING_DATASOURCE_USERNAME=kasyus
      - SPRING_DATASOURCE_PASSWORD=kasyus123
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092
      - SPRING_REDIS_HOST=redis
      - OTEL_SERVICE_NAME=user-service
    networks:
      - kasyus-network
    healthcheck:
      test: "curl --fail --silent user-service:8085/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    extends:
      file: common-config.yml
      service: microservice-eureka-config



  product-service:
    build:
      context: ../../product-service
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/kasyus_products
      - SPRING_DATASOURCE_USERNAME=kasyus
      - SPRING_DATASOURCE_PASSWORD=kasyus123
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092
      - SPRING_REDIS_HOST=redis
      - OTEL_SERVICE_NAME=product-service
      - MINIO_URL=http:/minio:9000
    networks:
      - kasyus-network
    healthcheck:
      test: "curl --fail --silent product-service:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    extends:
      file: common-config.yml
      service: microservice-eureka-config


  cart-service:
    build:
      context: ../../cart-service
      dockerfile: Dockerfile
    container_name: cart-service
    environment:
      - SERVER_PORT=8087
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/kasyus_carts
      - SPRING_DATASOURCE_USERNAME=kasyus
      - SPRING_DATASOURCE_PASSWORD=kasyus123
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092
      - SPRING_REDIS_HOST=redis
      - OTEL_SERVICE_NAME=product-service
    networks:
      - kasyus-network
    healthcheck:
      test: "curl --fail --silent cart-service:8087/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  order-service:
    build:
      context: ../../order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8082:8082"
    environment:
      - SERVER_PORT=8082
      - DISCOVERY_SERVICE_HOSTNAME=discovery-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/kasyus_orders
      - SPRING_DATASOURCE_USERNAME=kasyus
      - SPRING_DATASOURCE_PASSWORD=kasyus123
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092
      - SPRING_REDIS_HOST=redis
      - OTEL_SERVICE_NAME=order-service
    networks:
      - kasyus-network
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    extends:
      file: common-config.yml
      service: microservice-eureka-config


  message:
    build:
      context: ../../message
      dockerfile: Dockerfile
    container_name: message
    ports:
      - "9010:9010"
    environment:
      - OTEL_SERVICE_NAME=message
    healthcheck:
      test: "curl --fail --silent localhost:9010/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    networks:
      - kasyus-network
    extends:
      file: common-config.yml
      service: microservice-eureka-config


  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: kasyus
      POSTGRES_PASSWORD: kasyus123
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kasyus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kasyus"]
      interval: 20s
      timeout: 5s
      retries: 20


  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kasyus-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kasyus-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kasyus-network

  read:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 20
    networks: &loki-dns
      kasyus-network:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 20
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.5.1
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - kasyus-network

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        mkdir -p /data/products && \
        minio server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Konsol
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 20
    networks:
      - kasyus-network

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - kasyus-network

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    networks:
      - kasyus-network

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 20
    networks:
      - kasyus-network

  backend:
    image: grafana/loki:3.1.2
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - kasyus-network

  gateway:
    image: nginx:1.27.3
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 20s
      timeout: 5s
      retries: 20
    networks:
      - kasyus-network


#
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
#    container_name: elasticsearch
#    environment:
#      - discovery.type=single-node
#      - xpack.security.enabled=false
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ports:
#      - "9200:9200"
#    volumes:
#      - elasticsearch_data:/usr/share/elasticsearch/data
#    networks:
#      - kasyus-network
#
#  kibana:
#    image: docker.elastic.co/kibana/kibana:8.7.1
#    container_name: kibana
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch
#    networks:
#      - kasyus-network


networks:
  kasyus-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
#  elasticsearch_data:
